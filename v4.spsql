-- Create schema if it does not exist
CREATE SCHEMA IF NOT EXISTS Fproject;

-- Creating 'employment_status' table
CREATE TABLE Fproject.employment_status (
    id SERIAL PRIMARY KEY,
    employment_name VARCHAR
);

-- Creating 'role' table
CREATE TABLE Fproject.role (
    id SERIAL PRIMARY KEY,
    role_name VARCHAR UNIQUE,
    role_description TEXT
);

-- Creating 'user' table
CREATE TABLE Fproject."user" (
    id SERIAL PRIMARY KEY,
    WBI VARCHAR,
    f_name VARCHAR,
    l_name VARCHAR,
    email VARCHAR,
    role_id INT REFERENCES Fproject.role(id), -- Foreign key to the 'role' table
    employment_status_id INT REFERENCES Fproject.employment_status(id), -- Foreign key
    password_hash VARCHAR -- Storing the hashed password -- For Node.js, bcrypt is a good library for hashing passwords
);


-- Creating 'department' table
CREATE TABLE Fproject.department (
    id SERIAL PRIMARY KEY,
    dep_name VARCHAR
);

-- Creating 'position' table
CREATE TABLE Fproject.position (
    id SERIAL PRIMARY KEY,
    pos_name VARCHAR
);

-- Creating 'certificates' table
CREATE TABLE Fproject.certificates (
    id SERIAL PRIMARY KEY,
    certificate_name VARCHAR,
    is_permanent BOOLEAN,
    certificate_valid_from DATE,
    certificate_valid_till DATE
);

-- Creating 'department_user' table
CREATE TABLE Fproject.department_user ( -- Many to many relationship
    department_id INT REFERENCES Fproject.department(id),
    user_id INT REFERENCES Fproject."user"(id),
    PRIMARY KEY (department_id, user_id)
);

-- Creating 'position_user' table
CREATE TABLE Fproject.position_user ( -- Many to many relationship
    position_id INT REFERENCES Fproject.position(id),
    user_id INT REFERENCES Fproject."user"(id),
    PRIMARY KEY (position_id, user_id)
);

-- Creating 'certificates_user' table
CREATE TABLE Fproject.certificates_user ( -- Many to many relationship
    certificate_id INT REFERENCES Fproject.certificates(id),
    user_id INT REFERENCES Fproject."user"(id),
    PRIMARY KEY (certificate_id, user_id)
);
------------------------------------------------------------------------------------------------

-- Checklist Templates
CREATE TABLE Fproject.checklist_template (
    id SERIAL PRIMARY KEY,
    checklist_name VARCHAR,
    role_id INT REFERENCES Fproject.role(id) -- Associating checklist with a specific role
);

-- Checklist Items
CREATE TABLE Fproject.checklist_item (
    id SERIAL PRIMARY KEY,
    item_description TEXT
);

-- Many-to-Many relationship between Checklist Templates and Checklist Items
CREATE TABLE Fproject.checklist_template_item (
    checklist_template_id INT REFERENCES Fproject.checklist_template(id),
    checklist_item_id INT REFERENCES Fproject.checklist_item(id),
    PRIMARY KEY (checklist_template_id, checklist_item_id)
);

-- User Checklist Status
CREATE TABLE Fproject.user_checklist_status (
    user_id INT REFERENCES Fproject."user"(id),
    checklist_item_id INT REFERENCES Fproject.checklist_item(id),
    is_completed BOOLEAN DEFAULT FALSE,
    completed_at TIMESTAMP NULL, -- Optionally track when the item was completed
    PRIMARY KEY (user_id, checklist_item_id)
);





------------------------------------------------------------------------------------------------

-- Creating 'ticket_status' table
CREATE TABLE Fproject.ticket_status ( -- One to many relationship
    id SERIAL PRIMARY KEY,
    status_name VARCHAR,
    color BIGINT
);

-- Creating 'ticket_priorities' table
CREATE TABLE Fproject.ticket_priorities ( -- One to many relationship
    id SERIAL PRIMARY KEY,
    priority_name VARCHAR,
    color INT
);


-- Creating 'ticket' table
CREATE TABLE Fproject.ticket (
    id SERIAL PRIMARY KEY,
    subject VARCHAR,
    tag VARCHAR, -- Optional: A tag to categorize the ticket
    content TEXT,
    file_data BYTEA, -- Optional: If you want to store file data in the database
    status_id INT REFERENCES Fproject.ticket_status(id),
    priority_id INT REFERENCES Fproject.ticket_priorities(id),
    user_id INT REFERENCES Fproject."user"(id), -- Assuming there's a 'user' table to reference
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    completed_at TIMESTAMP NULL,
    assigned_to INT REFERENCES Fproject."user"(id), --to whom the ticket is assigned
    fallback_approver INT REFERENCES Fproject."user"(id) NULL -- If the assigned user is not available, the ticket can be assigned to a fallback approver
);


-- Creating 'categories' table (project names)
CREATE TABLE Fproject.categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR UNIQUE NOT NULL
);

-- Creating 'user_categories' table
CREATE TABLE Fproject.user_categories (
    user_id INT REFERENCES Fproject."user"(id),
    category_id INT REFERENCES Fproject.categories(category_id),
    PRIMARY KEY (user_id, category_id)
);


-- Creating 'ticket_category_ticket' table
CREATE TABLE Fproject.ticket_categories( -- Many to many relationship
    category_id INT REFERENCES Fproject.categories(category_id),
    ticket_id INT REFERENCES Fproject.ticket(id),
    PRIMARY KEY (category_id, ticket_id)
);

-- Creating 'ticket_comment' table
CREATE TABLE Fproject.ticket_comment (
    id SERIAL PRIMARY KEY,
    ticket_id INT REFERENCES Fproject.ticket(id),
    user_id INT REFERENCES Fproject."user"(id), -- The user who made the comment
    comment TEXT, -- The content of the comment
    file_data BYTEA, -- adding files to the comment
    status_change INT REFERENCES Fproject.ticket_status(id), -- Optional reference to a new status
    priority_change INT REFERENCES Fproject.ticket_priorities(id), -- Optional reference to a new priority
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- The date and time when the comment was made
);

-- Creating 'notifications' table
CREATE TABLE Fproject.notifications (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES Fproject."user"(id),
    ticket_id INT REFERENCES Fproject.ticket(id),
    comment_id INT REFERENCES Fproject.ticket_comment(id) NULL,
    notification_type VARCHAR, -- e.g., 'status_change', 'new_comment', 'ticket_assigned'
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    read BOOLEAN DEFAULT FALSE -- To track whether the notification has been read
);
CREATE TABLE Fproject.event_store (
    event_id SERIAL PRIMARY KEY,
    event_type VARCHAR NOT NULL,
    aggregate_type VARCHAR NOT NULL, -- 'ticket' for ticket-related events
    aggregate_id INT NOT NULL, -- The ticket ID to which the event relates
    payload JSON NOT NULL, -- Detailed event data (flexible structure)
    user_id INT REFERENCES Fproject."user"(id), -- The user responsible for the event
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);


-- Creating a 'permissions' table
CREATE TABLE Fproject.permissions (
    id SERIAL PRIMARY KEY,
    permission_name VARCHAR UNIQUE
);

-- Mapping roles to permissions (Many-to-Many)
CREATE TABLE Fproject.role_permissions (
    role_id INT REFERENCES Fproject.role(id),
    permission_id INT REFERENCES Fproject.permissions(id),
    PRIMARY KEY (role_id, permission_id)
);

-- Optionally, a table to track which users have access to which tickets if access is not solely based on role
CREATE TABLE Fproject.ticket_access (
    ticket_id INT REFERENCES Fproject.ticket(id),
    user_id INT REFERENCES Fproject."user"(id),
    PRIMARY KEY (ticket_id, user_id)
);


CREATE TABLE Fproject.user_status (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES Fproject."user"(id),
    status VARCHAR NOT NULL, -- e.g., 'Out of Office', 'Busy'
    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE(user_id, start_date, end_date) -- Ensures that there are no overlapping statuses for a user (data integrity)
);

CREATE TABLE Fproject.user_status_audit (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES Fproject."user"(id),
    old_status VARCHAR,
    new_status VARCHAR,
    changed_by_user_id INT REFERENCES Fproject."user"(id),
    change_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);



-- Index for searching tickets by user details
CREATE INDEX idx_user_details ON Fproject."user"(f_name, l_name);

-- Full-text search index on the ticket's content
CREATE INDEX idx_ticket_content ON Fproject.ticket USING GIN (to_tsvector('english', content));

-- Full-text search index on ticket comments
CREATE INDEX idx_ticket_comment ON Fproject.ticket_comment USING GIN (to_tsvector('english', comment));





